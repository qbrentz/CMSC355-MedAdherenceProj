//CHANGE FILETYPE TO JAVA FOR EXECUTING SHELL COMMANDS

package com.example.medadherence;

//import com.example.medadherence.controllers.*;
import com.example.medadherence.models.*;
import com.example.medadherence.repositories.*;
//import com.example.medadherence.services.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.shell.standard.ShellComponent;
import org.springframework.shell.standard.ShellMethod;

import java.time.LocalDateTime;
import java.util.List;


@ShellComponent
public class MedAdherenceShell {


    @ShellMethod("Quit the application. Usage: quit")
    public String quit() {
        System.exit(0); // Terminates the application
        return "Exiting..."; // This line will never be reached
    }

    
    @Autowired
    private PatientRepository patientRepository;

    @ShellMethod("Add a new patient. Usage: add-patient --name <name> --email <email>")
    public String addPatient(String name, String email, String userName) {
        Patient patient = new Patient(name, email, userName);
        patientRepository.save(patient);
        return "Patient added: " + name + " (" + email + ")";
    }

    @ShellMethod("Delete a patient by ID. Usage: delete-patient --id <id>")
    public String deletePatient(Long id) {
        if (patientRepository.existsById(id)) {
            patientRepository.deleteById(id);
            return "Patient with ID " + id + " deleted.";
        } else {
            return "Patient with ID " + id + " not found.";
        }
    }
    @ShellMethod("Update a patient's information. Usage: update-patient --id <id> --name <name> --email <email>")
    public String updatePatient(Long id, String name, String email) {
        if (patientRepository.existsById(id)) {
            Patient patient = patientRepository.findById(id).orElseThrow();
            patient.setName(name);
            patient.setEmail(email);
            patientRepository.save(patient);
            return "Patient with ID " + id + " updated.";
        } else {
            return "Patient with ID " + id + " not found.";
        }
    }
    @ShellMethod("Get a patient by ID. Usage: get-patient --id <id>")
    public String getPatient(Long id) {
        if (patientRepository.existsById(id)) {
            Patient patient = patientRepository.findById(id).orElseThrow();
            return "Patient found: " + patient.getName() + " (" + patient.getEmail() + ")";
        } else {
            return "Patient with ID " + id + " not found.";
        }
    }
    @ShellMethod("Get a patient by email. Usage: get-patient-by-email --email <email>")
    public String getPatientByEmail(String email) {
        List<Patient> patients = patientRepository.findByEmail(email);
        if (patients.isEmpty()) {
            return "No patients found with email: " + email;
        }
        StringBuilder result = new StringBuilder("Patients found:\n");
        for (Patient patient : patients) {
            result.append("- ").append(patient.getName()).append(" (").append(patient.getEmail()).append(")\n");
        }
        return result.toString();
    }
    @ShellMethod("Get a patient by name. Usage: get-patient-by-name --name <name>")
    public String getPatientByName(String name) {
        List<Patient> patients = patientRepository.findByName(name); // Collection of patients
    if (patients == null || patients.isEmpty()) {
        return "No patients found with name: " + name;
    }
    StringBuilder result = new StringBuilder("Patients found:\n");
    for (Patient patient : patients) {
        result.append("- ").append(patient.getName()).append(" (").append(patient.getEmail()).append(")\n");
    }
    return result.toString();
    }
    @ShellMethod("Get a patient by username. Usage: get-patient-by-username --username <username>")
    public String getPatientByUsername(String username) {
        List<Patient> patients = patientRepository.findByUserName(username);
        if (patients.isEmpty()) {
            return "No patients found with username: " + username;
        }
        StringBuilder result = new StringBuilder("Patients found:\n");
        for (Patient patient : patients) {
            result.append("- ").append(patient.getName()).append(" (").append(patient.getEmail()).append(")\n");
        }
        return result.toString();
    }
    @ShellMethod("List all patients.")
    public String listPatients() {
        List<Patient> patients = patientRepository.findAll();
        if (patients.isEmpty()) {
            return "No patients found.";
        }
        StringBuilder result = new StringBuilder("Patients:\n");
        for (Patient patient : patients) {
            result.append("- ").append(patient.getName()).append(" (").append(patient.getEmail()).append(")\n");
        }
        return result.toString();
    }

    @Autowired
    private PrescriptionRepository prescriptionRepository;

    @ShellMethod("Add a new prescription. Usage: add-prescription --name <name> --dosage <dosage>")
    public String addPrescription(String name, float dose, int inventory, String pharmacyID, String medicationID, String schedule, Patient patient) {
        Prescription prescription = new Prescription(name, dose, inventory, pharmacyID, medicationID, schedule, patient);
        prescriptionRepository.save(prescription);
        return "Prescription added: " + patient + name + " (" + dose + ")";
    }

    @ShellMethod("Delete a prescription by ID. Usage: delete-prescription --id <id>")
    public String deletePrescription(Long id) {
        if (prescriptionRepository.existsById(id)) {
            prescriptionRepository.deleteById(id);
            return "Prescription with ID " + id + " deleted.";
        } else {
            return "Prescription with ID " + id + " not found.";
        }
    }
    @ShellMethod("Update a prescription's information. Usage: update-prescription --id <id> --name <name> --dosage <dosage>")
    public String updatePrescription(Long id, String name, float dose, int inventory, String pharmacyID, String medicationID, String schedule, Patient patient) {
        if (prescriptionRepository.existsById(id)) {
            Prescription prescription = prescriptionRepository.findById(id).orElseThrow();
            prescription.setMedName(name);
            prescription.setDose(dose);
            prescription.setInventory(inventory);
            prescription.setPharmacyId(pharmacyID);
            prescription.setMedicationId(medicationID);
            prescription.setSchedule(schedule);
            prescription.setPatient(patient);
            prescriptionRepository.save(prescription);
            return "Prescription with ID " + id + " updated.";
        } else {
            return "Prescription with ID " + id + " not found.";
        }
    }
    @ShellMethod("Get a prescription by ID. Usage: get-prescription --id <id>")
    public String getPrescription(Long id) {
        if (prescriptionRepository.existsById(id)) {
            Prescription prescription = prescriptionRepository.findById(id).orElseThrow();
            return "Prescription found: " + prescription.getMedName() + " (" + prescription.getDose() + ")";
        } else {
            return "Prescription with ID " + id + " not found.";
        }
    }

    @ShellMethod("List all prescriptions. Usage: list-prescriptions")
    // This method lists all prescriptions in the system
    public String listPrescriptions() {
        List<Prescription> prescriptions = prescriptionRepository.findAll();
        if (prescriptions.isEmpty()) {
            return "No prescriptions found.";
        }
        StringBuilder result = new StringBuilder("Prescriptions:\n");
        for (Prescription prescription : prescriptions) {
            result.append("- ").append(prescription.getMedName()).append(" (").append(prescription.getDose()).append(")\n");
        }
        return result.toString();
    }

    @Autowired
    private MedicationLogRepository medicationLogRepository;

    @ShellMethod("Add a new medication log. Usage: add-medication-log --patientId <patientId> --timestamp <timestamp>")
    // This method adds a new medication log for a patient
    public String addMedicationLog(Long patientId, String timestamp) {
        LocalDateTime parsedTimestamp = LocalDateTime.parse(timestamp);
        MedicationLog medicationLog = new MedicationLog();
        medicationLogRepository.save(medicationLog);
        return "Medication log added for patient ID: " + patientId + " at " + timestamp;
    }

    
}